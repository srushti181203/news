pipeline {
    agent any

    environment {
        SONARQUBE = credentials('sonarqube-token')        // Jenkins credential for SonarQube
        DOCKERHUB = credentials('dockerhub-credentials')  // Jenkins credential for DockerHub
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/srushti181203/news.git'
            }
        }

        stage('Setup Python') {
            steps {
                sh '''
                  python3 -m venv venv
                  . venv/bin/activate
                  pip install --upgrade pip
                  pip install -r requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                  . venv/bin/activate
                  # Run pytest on tests/ if it exists, otherwise run on current dir
                  if [ -d "tests" ]; then
                      pytest tests/ --maxfail=1 --disable-warnings -q
                  else
                      pytest --maxfail=1 --disable-warnings -q
                  fi
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh '''
                      . venv/bin/activate
                      sonar-scanner \
                        -Dsonar.projectKey=fake-news-detection \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=$SONARQUBE
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                  docker build -t $DOCKERHUB_USR/fake-news-detection:latest .
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                sh '''
                  echo $DOCKERHUB_PSW | docker login -u $DOCKERHUB_USR --password-stdin
                  docker push $DOCKERHUB_USR/fake-news-detection:latest
                '''
            }
        }

        stage('Deploy Container') {
            steps {
                sh '''
                  docker stop fake-news-detection || true
                  docker rm fake-news-detection || true
                  docker run -d -p 5000:5000 --name fake-news-detection $DOCKERHUB_USR/fake-news-detection:latest
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline executed successfully!"
        }
        failure {
            echo "❌ Pipeline failed. Check logs."
        }
    }
}

pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('sonarqube-token')  // Your SonarQube token
        DOCKER_HUB = credentials('dockerhub-credentials')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                git branch: 'main', url: 'https://github.com/srushti181203/news.git'
            }
        }

        stage('Setup Python') {
            steps {
                echo 'Setting up Python environment...'
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube scan...'
                withSonarQubeEnv('sonarqube') {
                    script {
                        def scannerHome = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=fake-news-detection -Dsonar.sources=. -Dsonar.login=${SONAR_TOKEN} -Dsonar.exclusions=venv/**,**/__pycache__/**,**/*.pyc,**/tests/**"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    sh '''
                        docker build -t my-dockerhub-username/fake-news-app:latest .
                        echo $DOCKER_HUB_PSW | docker login -u $DOCKER_HUB_USR --password-stdin
                        docker push my-dockerhub-username/fake-news-app:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            deleteDir()
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}

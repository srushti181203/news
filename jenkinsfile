pipeline {
    agent any

    environment {
        VENV = "venv"
        SONARQUBE = credentials('sonarqube-token')  // Make sure you created this in Jenkins > Manage Credentials
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/srushti181203/news.git'
            }
        }

        stage('Setup Python') {
            steps {
                sh '''
                    python3 -m venv $VENV
                    source $VENV/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                    source $VENV/bin/activate
                    pytest --maxfail=1 --disable-warnings -q || echo "No tests found, skipping"
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {   // Jenkins SonarQube server name (configure under "Manage Jenkins > Configure System")
                    sh '''
                        source $VENV/bin/activate
                        sonar-scanner \
                            -Dsonar.projectKey=news-detection \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.login=$SONARQUBE
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t news-detection:latest .'
            }
        }

        stage('Deploy Container') {
            steps {
                sh '''
                    docker stop news-detection || true
                    docker rm news-detection || true
                    docker run -d --name news-detection -p 5000:5000 news-detection:latest
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Fake News Detection deployed successfully on Docker!"
        }
        failure {
            echo "❌ Pipeline failed. Check logs."
        }
    }
}
